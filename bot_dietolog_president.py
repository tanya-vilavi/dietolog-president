# bot_dietolog_president.py
import os
from datetime import datetime
import openai  # –≤–µ—Ä—Å–∏—è 0.28.*
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
# === CONFIG ===
import os
openai.api_key = os.getenv("OPENAI_API_KEY")
TG_BOT_TOKEN = "8288479102:AAGFn0vTj_Yd71TWKcfj4HyHazsOAmPxJtw"
# –ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –ø—É—Å—Ç–æ => –ø—É—Å–∫–∞—Ç—å –≤—Å–µ—Ö).
# –ü–æ–ª—É—á–∏ —Å–≤–æ–π id –∫–æ–º–∞–Ω–¥–æ–π /id –∏ –≤–ø–∏—à–∏ —Å—é–¥–∞, –Ω–∞–ø—Ä–∏–º–µ—Ä: {123456789}
ALLOWED_USER_IDS = set(int(x) for x in os.getenv("ALLOWED_USER_IDS", "").split(",") if x.strip().isdigit())
openai.api_key = OPENAI_API_KEY
bot = Bot(token=TG_BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher(bot)
# =================== User profile storage ===================
user_profile = {
    'age': 68,
    'weight_kg': 68,
    'height_cm': 153,
    'waist_cm': 83,
    'region': '–°–µ–≤–µ—Ä –†–æ—Å—Å–∏–∏',
    'bmi': 29,
    'gender': '–∂–µ–Ω—â–∏–Ω–∞',
    'post_mode': False,
    'goals': ["—Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞", "—É–ª—É—á—à–µ–Ω–∏–µ –ª–∏–ø–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è", "—Å—Ç–∞–±–∏–ª–∏–∑–∞—Ü–∏—è —Å–∞—Ö–∞—Ä–∞", "–∑–¥–æ—Ä–æ–≤–∞—è –ø–µ—á–µ–Ω—å"],
    'analyzes': {},
    'menu_nutrients': {}
}
# =================== Helpers ===================
def is_allowed(message: types.Message) -> bool:
    # –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç–æ–π ‚Äî –ø—É—Å–∫–∞–µ–º –≤—Å–µ—Ö; –µ—Å–ª–∏ –Ω–µ—Ç ‚Äî —Ç–æ–ª—å–∫–æ —Ç–µ—Ö, –∫—Ç–æ –≤ —Å–ø–∏—Å–∫–µ
    return not ALLOWED_USER_IDS or (message.from_user and message.from_user.id in ALLOWED_USER_IDS)
def build_menu_prompt(profile, post_mode=False):
    prompt = (
        f"–°–æ—Å—Ç–∞–≤—å –º–µ–Ω—é –Ω–∞ 2 –¥–Ω—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏:\n"
        f"- –í–æ–∑—Ä–∞—Å—Ç: {profile['age']} –ª–µ—Ç\n"
        f"- –†–æ—Å—Ç: {profile['height_cm']} —Å–º\n"
        f"- –í–µ—Å: {profile['weight_kg']} –∫–≥\n"
        f"- –û–∫—Ä—É–∂–Ω–æ—Å—Ç—å —Ç–∞–ª–∏–∏: {profile['waist_cm']} —Å–º\n"
        f"- –†–µ–≥–∏–æ–Ω: {profile['region']}\n"
        f"- BMI: {profile['bmi']}\n\n"
        f"–£—á–∏—Ç—ã–≤–∞–π –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è:\n"
        f"- –ü–µ—á–µ–Ω—å: —Å—Ç–µ–∞—Ç–æ–∑; —â–∞–¥—è—â–µ–µ –ø–∏—Ç–∞–Ω–∏–µ, –±–µ–∑ —Ç—è–∂—ë–ª—ã—Ö –∂–∏—Ä–æ–≤ –∏ –∂–∞—Ä–µ–Ω–æ–≥–æ\n"
        f"- –ü–æ—á–∫–∏: –°–ö–§ 53,2 ‚Üí —É–º–µ—Ä–µ–Ω–Ω—ã–π –±–µ–ª–æ–∫, –≤–æ–¥–∞ –¥–æ 19:00\n"
        f"- –õ–∏–ø–∏–¥—ã: –õ–ü–ù–ü 4,36 ‚Üë ‚Üí –ü–ù–ñ–ö, –∏—Å–∫–ª—é—á–∏—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –∂–∏—Ä—ã\n"
        f"- –ñ—ë–ª—á–Ω—ã–π: –∫–∞–º–µ–Ω—å 9,5 –º–º ‚Üí —Å—Ç–∞–±–∏–ª—å–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ, –±–µ–∑ –∂—ë–ª—á–µ–≥–æ–Ω–Ω—ã—Ö\n"
        f"- LCHF + –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ–µ –≥–æ–ª–æ–¥–∞–Ω–∏–µ (2 –ø—Ä–∏—ë–º–∞ –ø–∏—â–∏: 7-8 –∏ 14-15)\n"
        f"- –í–æ–¥–∞ ‚â• 1,5 –ª –¥–æ 19:00\n"
        f"- –ù–µ –º–µ–Ω–µ–µ 10 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∑–∞ 2 –¥–Ω—è\n"
    )
    prompt += "- –ü–æ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –í–ö–õ (–±–µ–∑ –∂–∏–≤–æ—Ç–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤, –±–µ–ª–∫–æ–≤—ã–µ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã)\n" if post_mode else "- –ü–æ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º –í–´–ö–õ\n"
    prompt += (
       "- –¶–µ–ª–∏: —Å–Ω–∏–∂–µ–Ω–∏–µ –≤–µ—Å–∞, —É–ª—É—á—à–µ–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–æ–≤, –æ—Ç–∫–∞–∑ –æ—Ç —Å–ª–∞–¥–∫–æ–≥–æ —Å –∑–∞–º–µ–Ω–æ–π\n"
        "- –£—á–µ—Å—Ç—å –ø—Ä–æ–¥—É–∫—Ü–∏—é –∏ –Ω—É—Ç—Ä–∏—Ü–µ–≤—Ç–∏–∫–∏ Vilavi\n"
        "- –ü—Ä–æ—Å—Ç—ã–µ, —Å–µ–∑–æ–Ω–Ω—ã–µ —Ä–µ—Ü–µ–ø—Ç—ã –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞\n"
        "- –î–æ–±–∞–≤—å –∫–æ—Ä–æ—Ç–∫–∏–π —Å–ø–∏—Å–æ–∫ –ø–æ–∫—É–ø–æ–∫ –Ω–∞ 2 –¥–Ω—è\n\n"
        "–°—Ñ–æ—Ä–º–∏—Ä—É–π –º–µ–Ω—é —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –±–ª—é–¥ –∏ –ø–æ—Ä—Ü–∏–π, –Ω–æ –±–µ–∑ –¥–ª–∏–Ω–Ω—ã—Ö —Ä–µ—Ü–µ–ø—Ç–æ–≤."
    )
    return prompt
def suggest_supplements(menu_nutrients):
    recommended_daily = {
        '–≤–∏—Ç–∞–º–∏–Ω D': 800, '–∫–∞–ª—å—Ü–∏–π': 1000, '–º–∞–≥–Ω–∏–π': 400,
        '–≤–∏—Ç–∞–º–∏–Ω –°': 90, '–∂–µ–ª–µ–∑–æ': 18, '—Ü–∏–Ω–∫': 10, '–≤–∏—Ç–∞–º–∏–Ω B12': 2.4,
    }
    recs = []
    for n, need in recommended_daily.items():
        have = menu_nutrients.get(n, 0)
        if have < need:
            recs.append(f"‚Ä¢ {n}: –¥–µ—Ñ–∏—Ü–∏—Ç ~{need - have:.1f} (–¥–æ–±–∞–≤—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –¥–æ–±–∞–≤–∫—É).")
    return "–í–∞—à–µ –º–µ–Ω—é –∑–∞–∫—Ä—ã–≤–∞–µ—Ç –∫–ª—é—á–µ–≤—ã–µ –≤–∏—Ç–∞–º–∏–Ω—ã –∏ –º–∏–Ω–µ—Ä–∞–ª—ã." if not recs else "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –¥–æ–±–∞–≤–∫–∞–º:\n" + "\n".join(recs)
def get_gpt_response(prompt: str) -> str:
    # openai==0.28 —Å—Ç–∏–ª—å
    try:
        resp = openai.ChatCompletion.create(
            model="gpt-4o",
            messages=[{"role": "user", "content": prompt}],
            max_tokens=800,
            temperature=0.7,
        )
        return resp.choices[0].message["content"].strip()
    except Exception as e:
        # –ª–æ–≥ –≤ –∫–æ–Ω—Å–æ–ª—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        print(f"[OpenAI error] {e}")
        return "‚ö†Ô∏è –í—Ä–µ–º–µ–Ω–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É."
# =================== UI: –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ===================
def main_kb():
    kb = types.ReplyKeyboardMarkup(resize_keyboard=True)
    kb.row(types.KeyboardButton("/–º–µ–Ω—é"), types.KeyboardButton("/–ø–æ—Å—Ç"))
    kb.row(types.KeyboardButton("/–∑–∞–º–µ–Ω–∞"), types.KeyboardButton("/—Å–æ–≤–µ—Ç"))
    kb.row(types.KeyboardButton("/–∞–Ω–∞–ª–∏–∑—ã"), types.KeyboardButton("/—Ü–µ–ª–∏"))
    kb.row(types.KeyboardButton("/–≤–æ–ø—Ä–æ—Å"))
    return kb
# =================== Handlers ===================
@dp.message_handler(commands=['id'])
async def id_handler(message: types.Message):
    await message.answer(f"–í–∞—à Telegram ID: <b>{message.from_user.id}</b>")
@dp.message_handler(commands=['start', 'help', '—Å—Ç–∞—Ä—Ç'])
async def start_handler(message: types.Message):
    if not is_allowed(message):
        return await message.answer("üîí –≠—Ç–æ—Ç –±–æ—Ç ‚Äî —á–∞—Å—Ç–Ω—ã–π. –î–æ—Å—Ç—É–ø —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
    text = (
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!\n\n"
        "üìã /–º–µ–Ω—é (–∏–ª–∏ /menu) ‚Äî –º–µ–Ω—é –Ω–∞ 2 –¥–Ω—è\n"
        "üîÑ /–∑–∞–º–µ–Ω–∞ (–∏–ª–∏ /replace) ‚Äî –∑–∞–º–µ–Ω–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç/—Ä–µ—Ü–µ–ø—Ç\n"
        "üå± /–ø–æ—Å—Ç (–∏–ª–∏ /post) ‚Äî –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å –ø–æ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º\n"
        "üß™ /–∞–Ω–∞–ª–∏–∑—ã (–∏–ª–∏ /labs) ‚Äî –≤–Ω–µ—Å—Ç–∏ –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏–∑–æ–≤\n"
        "üí° /—Å–æ–≤–µ—Ç (–∏–ª–∏ /advice) ‚Äî —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è –¥–Ω—è\n"
        "üéØ /—Ü–µ–ª–∏ (–∏–ª–∏ /goals) ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ —Ü–µ–ª–∏\n"
        "‚ùì /–≤–æ–ø—Ä–æ—Å (–∏–ª–∏ /ask) ‚Äî –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –¥–∏–µ—Ç–æ–ª–æ–≥—É\n\n"
        "üí¨ –ò–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç."
    )
    await message.answer(text, reply_markup=main_kb())
@dp.message_handler(commands=['–º–µ–Ω—é','menu'])
async def menu_handler(message: types.Message):
    if not is_allowed(message): return
    await message.answer("‚è≥ –ì–æ—Ç–æ–≤–ª—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ–µ –º–µ–Ω—é‚Ä¶")
    prompt = build_menu_prompt(user_profile, post_mode=user_profile['post_mode'])
    menu_text = get_gpt_response(prompt)
    await message.answer(menu_text)
# –≤—Ä–µ–º–µ–Ω–Ω–∞—è ¬´–∑–∞–≥–ª—É—à–∫–∞¬ª –Ω—É—Ç—Ä–∏–µ–Ω—Ç–æ–≤
    user_profile['menu_nutrients'] = {'–≤–∏—Ç–∞–º–∏–Ω D': 400,'–∫–∞–ª—å—Ü–∏–π': 750,'–º–∞–≥–Ω–∏–π': 350,'–≤–∏—Ç–∞–º–∏–Ω –°': 60,'–∂–µ–ª–µ–∑–æ': 15,'—Ü–∏–Ω–∫': 8,'–≤–∏—Ç–∞–º–∏–Ω B12': 1.5}
    await message.answer(suggest_supplements(user_profile['menu_nutrients']))
@dp.message_handler(commands=['–ø–æ—Å—Ç','post'])
async def post_handler(message: types.Message):
    if not is_allowed(message): return
    user_profile['post_mode'] = not user_profile['post_mode']
    mode = "–≤–∫–ª—é—á—ë–Ω" if user_profile['post_mode'] else "–≤—ã–∫–ª—é—á–µ–Ω"
    await message.answer(f"üå± –ü–æ—Å—Ç–Ω—ã–π —Ä–µ–∂–∏–º {mode}.")
@dp.message_handler(commands=['—Ü–µ–ª–∏','goals'])
async def goals_handler(message: types.Message):
    if not is_allowed(message): return
    goals = "\n".join([f"‚Ä¢ {g}" for g in user_profile['goals']])
    await message.answer(f"üéØ –¢–µ–∫—É—â–∏–µ —Ü–µ–ª–∏:\n{goals}")
@dp.message_handler(commands=['—Å–æ–≤–µ—Ç','advice'])
async def advice_handler(message: types.Message):
    if not is_allowed(message): return
    tip = get_gpt_response(
        "–î–∞–π –∫–æ—Ä–æ—Ç–∫—É—é (–¥–æ 2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π) –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –¥–Ω—è –ø–æ LCHF, "
        "—É—á–∏—Ç—ã–≤–∞—è —É–º–µ—Ä–µ–Ω–Ω—ã–π –±–µ–ª–æ–∫ (–°–ö–§ 53), —â–∞–¥—è—â—É—é –ø–µ—á–µ–Ω—å –∏ –ø–∏—Ç—å—ë –¥–æ 19:00."
    )
    await message.answer(f"üí° –°–æ–≤–µ—Ç –¥–Ω—è:\n{tip}")
@dp.message_handler(commands=['–∑–∞–º–µ–Ω–∞','replace'])
async def replacement_handler(message: types.Message):
    if not is_allowed(message): return
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–¥—É–∫—Ç –∏–ª–∏ —Ä–µ—Ü–µ–ø—Ç, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ –∑–∞–º–µ–Ω–∏—Ç—å. (–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
@dp.message_handler(commands=['–∞–Ω–∞–ª–∏–∑—ã','labs'])
async def analyzes_handler(message: types.Message):
    if not is_allowed(message): return
    await message.answer("–î–ª—è –≤–Ω–µ—Å–µ–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç:\n<b>–ü–æ–∫–∞–∑–∞—Ç–µ–ª—å: –∑–Ω–∞—á–µ–Ω–∏–µ</b>\n(–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)")
@dp.message_handler(commands=['–≤–æ–ø—Ä–æ—Å','ask'])
async def question_handler(message: types.Message):
    if not is_allowed(message): return
    await message.answer("–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –¥–∏–µ—Ç–æ–ª–æ–≥—É, —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º –æ—Ç–≤–µ—Ç–æ–º.")
@dp.message_handler(lambda m: m.text and not m.text.startswith('/'))
async def default_handler(message: types.Message):
    if not is_allowed(message): return
    prompt = f"–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n{message.text}\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ –æ–ø—ã—Ç–Ω—ã–π –¥–∏–µ—Ç–æ–ª–æ–≥ –∫—Ä–∞—Ç–∫–æ –∏ –ø—Ä–µ–¥–º–µ—Ç–Ω–æ."
    answer = get_gpt_response(prompt)
    await message.answer(answer)
# ================ Run bot ================
if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
